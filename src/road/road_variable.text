var v1 int
var v2 string
var v3 [10]int //数组
var v4 []int   //数组切片
var v5 struct {
	f int
}
var v6 *int           //指针
var v7 map[string]int //map key为string,value为int类型
var v8 func(a int) int

//golang结尾取消分号设定
//为了方便
var (
	v1 int
	v2 string
)

/*变量的初始化*/
var v1 int = 10 //完全体
var v2 = 10     //编译器可自动推导出变量类型
v3 := 10        //简易赋值，若使用:=该变量不应该是已经声明过的否则会报错
/*变量赋值*/
//在golang中变量和初始化是两种概念
var v10 int //声明
v10 = 123   //赋值
//交换变量的值(多重赋值)
i, j = j, i
//在使用函数返回多个值的时候，对于不需要的值可以使用_代替其他值，从而只获得自己需要的值
//常量是指编译期间不可更改的值
/*常量定义*/
const pi float64 = 3.1415926
const zero = 0.0 //无类型浮点常量
const (
	size int64 = 1024
	eof        = -1 // 无类型整型常量
)
const u, v float32 = 0, 3   //u = 0.0 v=0.3 常量的多重赋值
const a, b, c = 3, 4, "foo" //无类型整型和字符串常量
const mask = 1
/*预定义常量*/
//Go语言预定义了这些常量：true,false和iota,iota比较特殊，可认为是被编译器修改的常量
//在每一个const关键字出现时被重置为0，然后在下一个const出现之前，每出现一次iota，其所代表的数字会自动增1.
const ( //iota被重置为0
	c0 = iota //c0 == 0
	c1 = iota //c1 == 1
	c2 = iota //c2 == 2
)

const (
	a = 1 << iota // a == 1 (iota在每个const开头被重设为0)
	a = 1 << iota // a == 2
	c = 1 << iota // a == 4
)
//左移一位数就相当于乘以2的1次方，右移n位相当于乘以2的n次方
const (
	u         = iota * 42 //u = 0
	v float64 = iota * 42 //v = 42.0
	w float64 = iota * 42 //w = 84
)

const x = iota // x = 0
const y = iota // y = 0
//如果const内容一样那就可以省略之后的
const (
	c0 = iota //iota被重设为0， 0
	c1        //1
	c2        //2
)
const (
	a = 1 << iota // a == 1
	b             // b == 2
	c             // c == 4
)
const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Friday
	Saturday
	numberOfDays //这个常量没有导出
) //同Go语言的其他符号一样。以大写字母开头的常量在包外可见。次例子number为包内私有其他符号则可被访问
/*数据类型*/
//布尔类型 bool
//整型 int8， int16， int， uint, uintptr
//浮点类型 float32， float64
//复数类型complex64， complex128
//字符串string
//字符类型rune
//错误类型error

//指针(pointer)
//数组(array)
//切片(slice)
//字典(map)
//通道(chan)
//结构体(struct)
//接口(interface)
/*布尔类型*/
var v1 bool
v1 = true
v2 := (1==2) //推导为true

var b bool
b = (!!=0)
fmt.Println("Result:", b)//打印结果为true
/*整型*/
var value2 int32
value1 := 64
value2 = int32(value1)//强制编译，强制改变数据类型容易一式精度
//数组运算
5 % 3 = 2
//比较运算
i, j := 1, 2

if i == j {
     fmt.Println("i and j are equa1.")
}
//两种不同类型的整数不能直接比较
if i == 1 || j==2 {
  fmt.Println("i and j are equa1.")
}

/*浮点型*/

var fvalue1 float32

fvalue1 = 12
fvalue2 := 12.0 //如果不加小数点则会被推导为整型而不是浮点型
//使用等号=的话必须采用强制转换才可以
//浮点比较不能用==不精确会导致不稳定
//推荐方案
import "math"

func IsEqual(f1, f2, p float64)  {
       return math.Fdim(f1, f2) < p
}

/*复数类型*/

var value1 complex64
value1 = 3.2 + 12i
value2 := 3.2 + 12i
value3 := complex(3.2 + 12i)

/*字符串*/
var str string

str = "Hello world"
ch := str[0]     //取得到字符串的第一个字符
len(str)
//字符串遍历
str := "Hello, 世界"
n := len(str)
for i := 0; i < n; i++ {
    ch := str[i]
    fmt.Println(i, ch)
}

for i, ch := range str {
    fmt.Println(i, ch)
}

/*数组*/
[32]byte        //长度为32的数组，每个元素为一个字节
[2 * N] struct {x, y int32} //复杂类型数组
[1000]*float64    //指针数组
[3][5]int         //二维数组
[2][2][2]float64  //等同于

/*数组切片*/
//一个指向原生数组的指针
//数组切片中的元素个数
//数组切片已分配的存储空间

for i, v := range array {
	   fmt.Println("Array element[",i,"]=", v)
}
//如果将数组当函数的参数传入的话，go会自动复制一份函数的参数数组作为函数局部变量使用不会改变外部数据的值
package main

import "fmt"

func modify(array [10]int)  {
	   array[0] = 10
		 fmt.Println("In modify(), array values:", array)
}


func main()  {
	  array := [5]int{1,2,3,4,5}
		modify(array)
		fmt.Println("In main(), array values:", array)
}

//数组切片的数据结构可以抽象为3个变量：
//1.一个指向原生数组的指针
//2.数组切片中的元素个数
//3.数组切片已分配的存储空间
/*创建数组切片*/
//数组切片可以基于一个已存在的数组创建，可以使用数组一部分或者全部来创建
基于myArray的所有元素的切片
mySlice = myArray[:]
基于myArray的前五个元素创建数组切片
mySlice = myArray[:5]

动态的增减元素
可动态增减元素是数组切片比数组更为强大的功能，与数组相比切片多了个
储存能力的概念即元素个数和分配的空间可以是两个不同的值。合理的设置存储能力可以大幅降低切片内部重组内存和搬送内存的频率
len获取当前长度，cap查看数组的容量
append()可以为切片追加元素,追加第二个参数不一定是参数，也可以添加若干个元素在元素后面添加...
数组切片也可以基于另一个数组切片创建。新的切片甚至可以超过旧切片的元素个数，新切片超过的部分会填上0

map是一堆键值对的未排序集合,map声明基本上没有多余的元素
var myMap map[string] PersonInfo
myMap 是变量名，string 是键的类型， PersonInfo 是存放值的类型

创建map我们可以使用go的内置函数make()来创建一个新的map.
创建并初始化map
myMap = map[string] PersonInfo {
	"1234": PersonInfo{"1", "Jack", "Room101"}
}



go的流程控制语句
选择，循环，跳转，条件语句。选择语句，循环语句，跳转语句
流程中部分关键字：break,continue和fallthrough
if：条件语句不需要使用小括号括起来
    无论语句体内有几条语句，花括号都是必须存在的
    左花括号比喻与if或者else处在同一行
    在if之后，条件语句之前，可以添加变量初始化语句，使用;间隔
    在有返回值的函数中，不允许将最终的return语句版含在if..else结构中 

switc:左花括号必须与switch处于同一行
      条件表达式不限制为常量或者整数
      单个case中，可以出现多个结果的选项
      与C语言等规则相反，Go语言不需要用break来明确推出一个case
      可以不设定switch之后的条件表达式，在此种情况下，整个switch结构与多个if...else..的逻辑作用等同

for:  左花括号必须与for处于同一行
      Go语言中的for循环和C语言一样都允许在循环条件中定义和初始化变量。唯一的区别是G有眼不支持以逗号为间隔的多个赋值语句，鄙视使用平行赋值的方式来初始化多个变量
      Go语言的for循环同样支持contine和break来控制循环，但是他提供一个更高级的break可以选择中断哪一个循环

goto: 除非某些场景否则不介意用

函数：

不定参数：...type这样形式的参数为不定参数，并且必须最后一个参数，是一个语法糖即这种语法对语言的功能并没有影响，方便调用。使用语法糖可以减少程序出错的机会等同于[]type但是如果直接将参数写成这样，就会发现我们必须在调用的时候[]int{}来构造一个切片实例, 不定参数的传递
func myfunc(args ...int) {
	myfunc3(args...)
    myfunc3(args[1:]...)//可以传递片段，实际任意的int或者slice切片
}
如果想传递任意类型的参数可以指定类型为interface{}

匿名函数：在Go里面函数可以像普通变量一样被传递和使用  


//Go的匿名函数是一个闭包
闭包的可以包含自由（未绑定特定对象）变量的代码块，这些变量不在这个代码块或者任何全局上下文中定义，而且在定义代码块的环境中定义。要执行代码块（由于自由变量包含在代码块中，所以这些自由变量以及他们引用的对象没有被释放）为自由变量提供绑定的计算环境。 

闭包价值在于可以作为函数对象或者匿名函数，对类型系统而言，意味着不仅要表示数据还要表示代码。支持闭包的多数语言都将函数作为第一级对象，这些函数可以存储到变量中作为函数传递给其他函数，最终压迫的是能够被函数动态创建和返回

Go语言中的闭包同样也会引用到函数外的变量，闭包的实现确保只要闭包还要被使用，那么闭包引用的变量会一直存在


错误处理：Go语言引入了关于错误处理的标准模式，error接口定义方法
type error interface {
	Error() string
}
对于大多数函数，如果要返回错误，大致都可以定义为如下模式，将error作为多种返回值的最后一个

defer 在函数返回之前执行的操作

panic()与recover()以报告和处理运行时错误和程序中的错误场景
func panic {interface{}}
func recover() interface {}
在当一个函数执行过程中调用panic()函数时，正常的函数执行流程将立即终止，但函数中之前使用defer关键字延迟执行的语句将正常展开执行，之后函数将返回到调用函数，并导致逐层向上执行panic流程，直至所属异步中所有正在执行的函数被终止，错误信息将被报告，包括在调用panic函数时传入的参数，这个过程称为错误处理流程
从panic的参数类型interface{},改函数接收任意类型的数据，比如整型，字符串，对象
调用方法 panic(404) panic("network borken") panic(Error("file not exists"))

recover()函数用于终止错误处理流程，一般情况，recover()应该在一个使用的份儿关键字的函数中执行以有效截取错误处理流程。如果没有发生异常的异步流程中明确调用恢复过程。会导致异步所属的进程打印异常信息后直接退出

在go语言中，你会给任意类型（包括内置类型，但不包括指针类型）添加相应的方法
type Integer int

func (a Integer) Less(b Integer) bool {
	return a < b
}

值语义和引用语义
Go语言中的大多数类型都是基于值语义

Go基本类型， 例如byte, int, bool, float32, float64, string等
Go复合类型， 如数组array， 结构体struct, 指针pointer

Go的引用生成一个指向存该值地址的指针，称为指针变量

如果复制值直接用=如果想引用的话需要用引用&并且需要用到指针
b=&a此为引用值，此处变量b的类型不是[]int 而是*[]int类型
Go语言中4个类型比较特别，看起来像引用类型
数组切片：指向数组array的一个区间
map:及其常见的数据结构，提供键值查询能力
channel：执行体(goroutine)间的通信设施
接口(interface)：对一组满足某个契约的类型的抽象
数组切片本质上是一个区间，可以大致将[]T表示为
type slice struct {
	first *T
	len int
	cap int
}
数组切片内部是指向数组的指针，所以可以改变所指向的数组并不奇怪。数组切片类型本身的赋值仍然是值语义
map本质是一个字典指针，可以大致将map[K]V表示为“
type Map_k_v struct {
	
}

type map[K]V struct {
	imp1 *Map_K_V
}

基于指针我们完全可以自定义一个引用类型
type IntegerRef struct {
	imp1 *int
}

channal和map类似，本质上是一个指针，将他们设计为引用类型而不是统一的值类型的原因是完整复制一个channel或map并不是常规需求

type Interface struct {
	data *void
	itab *Itab
}


结构体：
go语言的结构体和其他语言的类有这同等的地位但是Go放弃了包括继承内的大量面向对象特性，只保留了组合这个最基础的特性

组合甚至不能算面向对象特性，因为C语言这样的过程语言也有结构体，也有组合，组合只是形成复合类型的基础
Go语言的结构体只是很普通的符合类型，定义一个矩形类型

type Rect struct {
	x, y float64
	width, height float64
}
然后定义Area()来计算矩形的面积
func (r *Rect) Area() float64 {
	return r.width * r.height
}


初始化：
定义了结构之后，创建并初始化Rect类型对象实例
rect1 := new(Rect)
rect2 := &Rect()
rect3 := &Rect(0, 0, 100, 200)
rect4 := &Rect(width: 100, height: 200)
在Go语言中，未进行显示初始化的变量都会被初始化为该类型的零值
在Go语言中没有构造函数的概念，对象的创建通常由一个全局函数来完成以NewXXX来命名。表示"构造函数"
func NewRect(x, y, width, height, height float64) *Reat{
	return &Reat(x, y, width, height)
}

匿名组合:

go采用了 组合文法，将其称为匿名组合

type Base struct {
	Name string
}

func (base *Base) Foo() {}
func (base *Base) Bar() {}

type Foo struct {
	Base
}

func (foo *Foo) Bar() {
	foo.Base.Bar()//改写了Base类的Bar方法
}

以上定义了一个base类(机构体),实现了Foo()与Bar()，定义一个Foo类，该类从Base类"继承"，并改写了Bar(方法)
两个成员方法，然后定义了一个Foo类，该类从Base类"继承"，
在"派生类"Foo没有改写"基类"Base的成员方法时，相应的方法就被"继承"，调用foo.Foo()和调用foo.Base.Foo()效果一致

Go语言很清晰告诉类的内存布局是怎样的，Go语言中还可以随意所欲次该布局

type Foo struct {
	...//其他成员
	Base//基类Base的数据放在了"派生类"Foo的最后
}

在Go语言中，还可以以指针方式从一个类型"派生"
type Foo struct {
	*Base
	...
}//在这段Go代码中仍有"派生"效果，只是在创建Foo实例的时候，需要外部提供一个Base类实例指针

Go曾提到匿名组合的一个小价值，定义如下的类型。匿名组合了一个log.Logger指针：

type Job struct {
	Command string
    *log.Logger
}
合适的赋值后，在Job类型所有成员可以舒适借用所有log.Logger提供的方法
func (job *Job)Start() {
	job.Log("strarting now...")
	//逻辑
	job.Log("started.")
}

对于Job的实现者来说，他甚至根本就不用意识到log.Logger类型的存在，这就是匿名组合的魅力

需要注意的是，不管匿名或者非匿名，被组合的类型所包含的方法虽然都升级成了外部这个组合类型的方法，但其实它们被组合方法调用时接收者并没有改变，Job例子中，即使组合后调用方式改变成了job.Log(),但Log函数的接收者扔是log.Logger指针，因此在Log中不可能访问到job的其他成员的方法和变量


如果在继承中使用了相同的命名的冲突的成员，访问子结构体是不会发生突出报错，会直接访问子结构体中的成员，但不可同时继承两个相同名字指针的结构体


Go语言对关键字增加很吝啬，要使某个符号对其他包可见，需要将该符号定义为以大写字母如：
type Rect struct {
	X, Y float64
	Width, Height float64
}
这样Rect类型的成员变量就被全部导出了，可以被所有其他引用了Rect所在包的代码访问到。成员方法的可访问性遵循同样的规则
func (r *Rect) area() float64 {
	return r.Width * r.Height
}//这样,Rect的area()方法只能在该类型所在的包内使用
Go语言中符号的可访问性是包一级而不是类型一级的，area()是Reat的内部方法，但同一包中的其他类型也都可以访问它，这样的这样的可访问性很粗狂，很实用，如果Go语言符号的可访问性是类型一级的，少不了加上friend这样的关键字，以表示两个类的朋友关系，可以访问彼此的私有成员

接口:
接口在Go中有至关重要的地位为类型系统的基石
Go语言的结构不单单只是接口

在Go语言中，一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口
type File struct {
	//...
}

func (f *File) Read(buf []type) (n int, err error)
func (f *File) Write(buf []byte) (n int, err error)
func (f *File) Seek(off int64, whence int) (pos int64, err error)
func (f *File) Close() error
此处定义了一个File类并实现有Read(), Wirte(), Seek(), Close()等方法

设想有如下接口
type IFile interface {
	Read(buf []byte) (n int, err error)
	Write(buf []byte) (n int, err error)
	Seek(off int64, whence int) (pos int64, err error)
	Close() error
}

type IReader interface {
	Read(buf []byte) (n int, err error)
}

type IWrite interface {
	Write(buf []byte) (n int, err error)
}

type ICloser interface {
	Close() error
}

尽管File类并没有从这些接口继承，甚至可以不知道这些接口的存在，但是File类实现了这些接口，可以进行赋值

var file1 IFile = new(File)
var file2 IReader = new(File)
var file3 IWriter = new(File)
var file4 ICloser = new(File)





































































































